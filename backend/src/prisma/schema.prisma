// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  firstName        String?
  lastName         String
  passwordHash     String
  isVerified       Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  roleId           String // Reference to Role
  role             Role               @relation(fields: [roleId], references: [id])
  store            Store?
  sessions         Session[]
  verificationCode VerificationCode[]

  @@index([email])
}

model Store {
  id           String    @id @default(uuid())
  businessName String
  contactEmail String?
  contactPhone String?
  logo         String?
  description  String?
  address      String?
  location     String?
  products     Product[]
  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String    @unique
  reviews      Review[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isVerified   Boolean   @default(false)
  isdeleted    Boolean   @default(false)
}

model Review {
  id        String   @id @default(uuid())
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  price       Float
  images      String[]
  quantity    Int
  isdeleted   Boolean    @default(false)
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  categories  Category[]
  store       Store      @relation(fields: [storeId], references: [id])
  storeId     String
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userAgent String
  ipAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model VerificationCode {
  id        String               @id @default(uuid())
  user      User                 @relation(fields: [userId], references: [id])
  userId    String //Not unique, as a user can have multiple verification codes pending - EMAIL_VERIFICATION and  PASSWORD_RESET
  type      VerificationCodeType @default(EMAIL_VERIFICATION)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  expiresAt DateTime
}

enum VerificationCodeType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[] @relation("RoleToPermissions")
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(uuid())
  name      String   @unique
  roles     Role[]   @relation("RoleToPermissions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
